-- | The storage layer is a highly specialized database for storing the
--   blockchain. It consists of five subcomponents:
--
-- * An abstract file system API, 'System.FS.API.HasFS',
--   that smooths out over some differences between the file systems of
--   different operating systems and, more importantly, allows us to simulate
--   all kinds of failures. This is then used for stress-testing the other
--   components below.
--
-- * The __[Immutable DB]("Ouroboros.Consensus.Storage.ImmutableDB")__, stores
--   the part of the chain that is immutable, that is, no longer subject to
--   rollback. It is an append-only database, providing efficient access to the
--   chain. 'Ouroboros.Consensus.Storage.ImmutableDB.API.ImmutableDB' defines
--   the immutable DB API.
--
-- * The __[Volatile DB]("Ouroboros.Consensus.Storage.VolatileDB")__, stores the
--   part of the chain near its tip. This doesn't really store a __chain__ as
--   such, but rather simply a collection of blocks from which we might
--   __construct__ a chain.
--   'Ouroboros.Consensus.Storage.VolatileDB.API.VolatileDB' defines the
--   volatile DB API.
--
-- * The __[Ledger DB]("Ouroboros.Consensus.Storage.LedgerDB")__, stores the
--   \(k\) last ledger states corresponding to the blocks on the current chain
--   (which are part of the volatile DB), and means to read
--   'Ouroboros.Consensus.Ledger.Tables.Basics.LedgerTables' for
--   them. 'Ouroboros.Consensus.Storage.LedgerDB.LedgerDB' defines the ledger DB
--   API.
--
-- * The Chain DB finally combines all of these components. It makes decisions
--   about which chains to adopt (chain selection), switches to forks when
--   needed, deals with clock skew, and provides various interfaces to the rest
--   of the consensus layer for things like finding out which blocks were
--   invalid (so we can disconnect from the clients who sent them), cursors that
--   follow the tip of the chain (so that we can inform our downstream peers of
--   how our chain evolves), etc. In many ways, the chain DB is the component
--   that is responsible for "consensus": deciding which chain is the one true
--   chain. 'Ouroboros.Consensus.Storage.ChainDB.API.ChainDB' defines the chain
--   DB API.
--
-- == Resource management in the ChainDB
--
-- Each of the databases in the ChainDB can produce resources that need to be
-- eventually freed. In particular:
--
-- - The LedgerDB is used to create 'Forker's
--
-- - The ChainDB is used to create 'Follower's (which in turn contain
--   'Iterator's).
--
-- The 'runWith' function in Consensus spawns a resource registry (which we will
-- name __the consensus registry__) which will contain the ChainDB. Shutting
-- down the Consensus layer is what will close the ChainDB by the consensus
-- resource registry going out of scope.
--
-- The resources above will be created by clients of the databases, not the
-- databases themselves. For example, it is Chain selection the one that opens a
-- forker using the LedgerDB. This in particular means that any clients that
-- create these resources will be created later than the database.
--
-- We rely on a specific sequence of events for this schema to be correct:
--
-- - The ChainDB is only closed by exiting the scope of the consensus
--   resource registry.
--
-- - If a client that can create resources is forked into a separate thread,
--   such thread is linked to the consensus registry. That way, it will be
--   deallocated before the ChainDB is closed, and its internal registry will
--   release any resources created in the client.
--
-- At the moment, we have two different approaches to resources and closing of
-- the databases:
--
-- - In the LedgerDB, closing the database does not close any of the resources
--   but makes them unable to do any action other than being freed. See
--   'ldbForkers'.
--
-- - In the ChainDB, closing the database does close all the followers and
--   iterators.
--
-- Ideally, we would change the ChainDB to follow the same approach as the
-- LedgerDB.
module Ouroboros.Consensus.Storage.ChainDB
  ( module Ouroboros.Consensus.Storage.ChainDB.API
  , module Ouroboros.Consensus.Storage.ChainDB.Impl
  ) where

import Ouroboros.Consensus.Storage.ChainDB.API
import Ouroboros.Consensus.Storage.ChainDB.Impl
