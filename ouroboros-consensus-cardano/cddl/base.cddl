telescope8<byron, shelley, allegra, mary, alonzo, babbage, conway, dijkstra>
  = [pastEra, pastEra, pastEra, pastEra, pastEra, pastEra, pastEra, currentEra<dijkstra>] /
    [pastEra, pastEra, pastEra, pastEra, pastEra, pastEra, currentEra<conway>] /
    [pastEra, pastEra, pastEra, pastEra, pastEra, currentEra<babbage>] /
    [pastEra, pastEra, pastEra, pastEra, currentEra<alonzo>] /
    [pastEra, pastEra, pastEra, currentEra<mary>] /
    [pastEra, pastEra, currentEra<allegra>] /
    [pastEra, currentEra<shelley>] /
    [currentEra<byron>]

ns8<byron, shelley, allegra, mary, alonzo, babbage, conway, dijkstra>
  = [7, dijkstra] /
    [6, conway] /
    [5, babbage] /
    [4, alonzo] /
    [3, mary] /
    [2, allegra] /
    [1, shelley] /
    [0, byron]

;; Blockchain types
pastEra = [bound, bound]
currentEra<st> = [bound, st]
bound = [relativeTime, slotno, epochno]
eraIdx = word8
individualPoolStake = [stake, hash]
nonce = [0] / [1, hash]
point = [] / [ slotno, hash ]
poolDistr = map<keyhash, individualPoolStake>
slotno = word64
stake = rational

withOrigin<v> = [] / [v]

;; Collections
either<x, y> = [0, x] / [1, y]
map<x, y> = { * x => y }
maybe<x> = [] / [x]
seq<x> = [*23 x] / [24* x] ; encoded with indefinite-length encoding
set<x> = #6.258([* x])

;; Types from other packages
blockno = word64
epochno = word64
coin = word64
rational = [int, int]
keyhash = bstr .size 28
hash = bstr .size 32
relativeTime = int

;; Base word types
word8  = uint .size 1
word32 = uint .size 4
word64 = uint .size 8
